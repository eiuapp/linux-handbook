{"./":{"url":"./","title":"前言","keywords":"","body":"Linux Handbook 此书是个人对linux的阅读与理解，帮助大家更快了解linux的管理和使用。 GitHub地址：https://github.com/eiuapp/linux-handbook 在线访问地址：https://eiuapp.github.io/linux-handbook linux是著名的操作系统。 相关资源 关于 本书中引用了一些公开的分享与链接并加以整理。 本书作于2019年初，会持续更新。 Linux实践指南 | Linux实践指南点击关注【servicemesher】公众号回复【加群】加入学习群 | Copyright © eiuapp.github.io 2017-2019 all right reserved，powered by Gitbook Updated at 2019-09-06 05:46:26 "},"post/ubuntu/ubuntu-limit-for-number-of-file-watchers-reached.html":{"url":"post/ubuntu/ubuntu-limit-for-number-of-file-watchers-reached.html","title":"系统对文件监控的数量到达限制数量","keywords":"","body":"系统对文件监控的数量已经到达限制数量了 Ubuntu Error: ENOSPC:System limit for number of file watchers reached 解决方法： 修改系统监控文件数量 Ubuntu sudo gedit /etc/sysctl.conf 添加一行在最下面. fs.inotify.max_user_watches=524288 然后保存退出！ 执行 sudo sysctl -p 然后就解决了！ ref https://blog.csdn.net/weixin_43760383/article/details/84326032 Linux实践指南 | Linux实践指南点击关注【servicemesher】公众号回复【加群】加入学习群 | Copyright © eiuapp.github.io 2017-2019 all right reserved，powered by Gitbook Updated at 2019-09-06 05:46:26 "},"post/ubuntu/dpkg.html":{"url":"post/ubuntu/dpkg.html","title":"Ubuntu 下如何查看已安装的软件","keywords":"","body":"Ubuntu 下如何查看已安装的软件 1.查看安装的所有软件 dpkg -l 例如：dpkg -l | grep ftp 2.查看软件安装的路径 dpkg -L | grep ftp 也可以用 whereis ftp 3.查看软件版本 aptitude show 例如：aptitude show ftp Linux实践指南 | Linux实践指南点击关注【servicemesher】公众号回复【加群】加入学习群 | Copyright © eiuapp.github.io 2017-2019 all right reserved，powered by Gitbook Updated at 2019-09-06 05:46:26 "},"post/mount/linux-mkfs-mount.html":{"url":"post/mount/linux-mkfs-mount.html","title":"格式化并挂载硬盘","keywords":"","body":"umount后格式化后mount umount ubuntu@utuntu:~$ sudo umount sdb umount - target is busy https://www.cnblogs.com/ding2016/p/9605526.html ubuntu@utuntu:~$ sudo umount sdb umount: /home/ubuntu/sdb: target is busy. ubuntu@utuntu:~$ mount | grep sdb /dev/sdb1 on /home/ubuntu/sdb type fuseblk (rw,relatime,user_id=0,group_id=0,allow_other,blksize=4096) ubuntu@utuntu:~$ which fuser /bin/fuser ubuntu@utuntu:~$ fuser -mv sdb USER PID ACCESS COMMAND /home/ubuntu/sdb: root kernel mount /home/ubuntu/sdb ubuntu 17228 ..c.. node ubuntu@utuntu:~$ sudo kill 17228 ubuntu@utuntu:~$ sudo umount sdb ubuntu@utuntu:~$ ls sdb ubuntu@utuntu:~$ 格式化分区（mkfs.ext4） 对新建分区（例：/dev/sda1）进行格式化：mkfs.ext4 /dev/sdb1 把/dev/sdb1格式化成ext4文件系统。 # mkfs -t ext4 /dev/sdb1 挂载 mkdir /sdb sudo mount /dev/sdb1 /sdb 写入 fstab ubuntu@utuntu:~$ sudo vi /etc/fstab ubuntu@utuntu:~/lcnx/local$ cat /etc/fstab | grep sdb /dev/sdb1 /sdb fuseblk defaults 0 0 ubuntu@utuntu:~/lcnx/local$ Linux实践指南 | Linux实践指南点击关注【servicemesher】公众号回复【加群】加入学习群 | Copyright © eiuapp.github.io 2017-2019 all right reserved，powered by Gitbook Updated at 2019-09-06 05:46:26 "},"post/mount/linux-mount-use-etc-fstab.html":{"url":"post/mount/linux-mount-use-etc-fstab.html","title":"Linux自动挂载（配置/etc/fatab）","keywords":"","body":"Linux自动挂载（配置/etc/fatab） mount 中的第三个参数，硬盘类型，到底写什么呢？ （错误）根据 mount 命令 ubuntu@utuntu:~$ mount | grep sda /dev/sda2 on /boot type ext4 (rw,relatime,data=ordered) /dev/sda1 on /boot/efi type vfat (rw,relatime,fmask=0022,dmask=0022,codepage=437,iocharset=iso8859-1,shortname=mixed,errors=remount-ro) ubuntu@utuntu:~$ mount | grep sdb /dev/sdb1 on /home/ubuntu/sdb type fuseblk (rw,relatime,user_id=0,group_id=0,allow_other,blksize=4096) /etc/fstab 中应该这样写 /dev/sdb1 /home/ubuntu/sdb fuseblk defaults 0 0 根据 blkid 命令 ubuntu@utuntu:~$ blkid /dev/sda1: UUID=\"B4CB-FC05\" TYPE=\"vfat\" PARTUUID=\"54870ae6-8ccc-44c3-b600-34a116fffe23\" /dev/sda2: UUID=\"90b2a4b2-a3b1-4640-afb7-1d63314a8a26\" TYPE=\"ext4\" PARTUUID=\"1fc077e0-3aa8-498d-b40f-b7e4e4a01250\" /dev/sda3: UUID=\"0oTOy6-cSKq-fYhr-XMTV-za8S-WArh-Cusj81\" TYPE=\"LVM2_member\" PARTUUID=\"c75bca25-afe2-4859-8b81-e9dfe42842d7\" /dev/sdb1: UUID=\"FE46843C4683F3A5\" TYPE=\"ntfs\" PARTUUID=\"b753b753-01\" /dev/mapper/ubuntu--vg-ubuntu--lv: UUID=\"cfb4d330-2a62-4b62-b7c0-7ed708ac224a\" TYPE=\"xfs\" ubuntu@utuntu:~$ cat /etc/fstab UUID=cfb4d330-2a62-4b62-b7c0-7ed708ac224a / xfs defaults 0 0 UUID=90b2a4b2-a3b1-4640-afb7-1d63314a8a26 /boot ext4 defaults 0 0 UUID=B4CB-FC05 /boot/efi vfat defaults 0 0 /swap.img none swap sw 0 0 ubuntu@utuntu:~$ /etc/fstab 中应该这样写 /dev/sdb1 /home/ubuntu/sdb ntfs defaults 0 0 https://www.cnblogs.com/miaoxg/p/5971036.html https://blog.csdn.net/greenapple_shan/article/details/52799631 知道了，应该写 ntfs 哟。 Linux实践指南 | Linux实践指南点击关注【servicemesher】公众号回复【加群】加入学习群 | Copyright © eiuapp.github.io 2017-2019 all right reserved，powered by Gitbook Updated at 2019-09-06 05:46:26 "},"post/linux-tar-z-unknown-function-modifie.html":{"url":"post/linux-tar-z-unknown-function-modifie.html","title":"linux tar: z: unknown function modifie 错误","keywords":"","body":"linux tar: z: unknown function modifie 错误 转载 https://blog.csdn.net/syc001/article/details/72841916 某些linux版本的机器上使用 tar -zxvf *.tar.gz 命令解压.tar.gz时会出现 tar: z: unknown function modifier 错误。 而使用 tar -x *.tar.gz 会出现“tar: /dev/rmt/0: No such file or directory”错误。 这是因为该linux下的tar不支持z参数造成的。在这种情况下，可以把解压过程分为两步： gzip -d yourfile.tar.gz。生成一个.tar文件。 tar -xvf yourfile.tar。解压文件。 Linux实践指南 | Linux实践指南点击关注【servicemesher】公众号回复【加群】加入学习群 | Copyright © eiuapp.github.io 2017-2019 all right reserved，powered by Gitbook Updated at 2019-09-06 05:46:26 "},"post/ubuntu-docker-break-ufw-rules-state-2.html":{"url":"post/ubuntu-docker-break-ufw-rules-state-2.html","title":"ubuntu: docker break ufw's rules之容器连不上外网","keywords":"","body":"docker break ufw's rules in ubuntu - env2 ufw 阻止了从docker容器到外部的网络连接 对我来说这是一个非常标准的设置，我有一台运行docker和ufw的ubuntu机器作为我的防火墙。 如果启用防火墙，则docker实例无法连接到外部 https://blog.36web.rocks/2016/07/08/docker-behind-ufw.html https://oomake.com/question/4955599 env 当运行docker后 docker 配置 ubuntu@utuntu:~/lcnx/local/lvchuang-server$ sudo cat /etc/docker/daemon.json { \"hosts\": [\"tcp://0.0.0.0:2376\",\"unix:///var/run/docker.sock\"], \"registry-mirrors\": [\"https://0d6wdn2y.mirror.aliyuncs.com\"], \"dns\" : [\"192.168.168.222\"] } ubuntu@utuntu:~/lcnx/local/lvchuang-server$ sudo cat /etc/default/docker # Docker Upstart and SysVinit configuration file # # THIS FILE DOES NOT APPLY TO SYSTEMD # # Please see the documentation for \"systemd drop-ins\": # https://docs.docker.com/engine/admin/systemd/ # # Customize location of Docker binary (especially for development testing). #DOCKERD=\"/usr/local/bin/dockerd\" # Use DOCKER_OPTS to modify the daemon startup options. #DOCKER_OPTS=\"--dns 8.8.8.8 --dns 8.8.4.4\" DOCKER_OPTS=\"--iptables=false\" # If you need Docker to use an HTTP proxy, it can also be specified here. #export http_proxy=\"http://127.0.0.1:3128/\" # This is also a handy place to tweak where Docker's temporary files go. #export DOCKER_TMPDIR=\"/mnt/bigdrive/docker-tmp\" ubuntu@utuntu:~/lcnx/local/lvchuang-server$ sudo cat /etc/default/docker | grep DOCKER_OPTS # Use DOCKER_OPTS to modify the daemon startup options. #DOCKER_OPTS=\"--dns 8.8.8.8 --dns 8.8.4.4\" DOCKER_OPTS=\"--iptables=false\" ubuntu@utuntu:~/lcnx/local/lvchuang-server$ docker container 现象 ubuntu@utuntu:~/docker/images/ubuntu$ docker run -it -d --dns 192.168.168.222 --name ubuntu-tools ubuntu-tools:v1.0 b4b3f7cd3d03c09f48eae8b0979678af57a07b2fcf118f80de653f8ef45c4e4e ubuntu@utuntu:~/docker/images/ubuntu$ docker exec -it ubuntu-tools bash root@b4b3f7cd3d03:/# cat /etc/resolv.conf nameserver 192.168.168.222 root@b4b3f7cd3d03:/# ping qq.com ^C 当ufw disable后, 则 container 可以连接外网 root@b4b3f7cd3d03:/# ping qq.com PING qq.com (59.37.96.63) 56(84) bytes of data. 64 bytes from 59.37.96.63: icmp_seq=1 ttl=54 time=4.77 ms 64 bytes from 59.37.96.63: icmp_seq=2 ttl=54 time=4.69 ms ^C --- qq.com ping statistics --- 2 packets transmitted, 2 received, 0% packet loss, time 1001ms rtt min/avg/max/mdev = 4.691/4.730/4.770/0.079 ms root@b4b3f7cd3d03:/# route Kernel IP routing table Destination Gateway Genmask Flags Metric Ref Use Iface default 172.17.0.1 0.0.0.0 UG 0 0 0 eth0 172.17.0.0 * 255.255.0.0 U 0 0 0 eth0 root@b4b3f7cd3d03:/# traceroute qq.com traceroute to qq.com (59.37.96.63), 30 hops max, 60 byte packets 1 172.17.0.1 (172.17.0.1) 0.095 ms 0.036 ms 0.035 ms 2 * * * 3 218.17.137.1 (218.17.137.1) 4.515 ms 5.474 ms 5.535 ms 4 202.105.103.117 (202.105.103.117) 3.896 ms 202.105.159.205 (202.105.159.205) 3.651 ms 202.105.159.213 (202.105.159.213) 3.763 ms 5 117.176.37.59.broad.dg.gd.dynamic.163data.com.cn (59.37.176.117) 4.348 ms * * 6 119.147.223.178 (119.147.223.178) 3.624 ms 119.147.223.254 (119.147.223.254) 3.451 ms 121.34.242.134 (121.34.242.134) 3.370 ms 7 * * * 8 14.17.2.250 (14.17.2.250) 6.196 ms 14.17.2.242 (14.17.2.242) 6.363 ms 6.457 ms 9 * * * 10 * * * 11 * * * 12 * * * 13 * * * 14 * * * 15 * * * 16 * * *^C root@b4b3f7cd3d03:/# ufw 日志 显示来自docker的阻塞连接 $ sudo tail /var/log/ufw.log Jun 11 11:46:08 utuntu kernel: [68180.673178] [UFW BLOCK] IN=enp2s0 OUT= MAC=01:00:5e:00:00:01:78:11:dc:3c:d0:1e:08:00 SRC=0.0.0.0 DST=224.0.0.1 LEN=32 TOS=0x00 PREC=0xC0 TTL=1 ID=0 DF PROTO=2 Jun 11 11:46:08 utuntu kernel: [68180.673448] [UFW BLOCK] IN=enp2s0 OUT= MAC=01:00:5e:00:00:01:78:11:dc:3c:d0:1e:08:00 SRC=0.0.0.0 DST=224.0.0.1 LEN=32 TOS=0x00 PREC=0xC0 TTL=1 ID=0 DF PROTO=2 Jun 11 11:46:09 utuntu kernel: [68181.175761] [UFW BLOCK] IN=enp2s0 OUT= MAC=01:00:5e:00:00:01:78:11:dc:17:16:de:08:00 SRC=0.0.0.0 DST=224.0.0.1 LEN=32 TOS=0x00 PREC=0xC0 TTL=1 ID=0 DF PROTO=2 Jun 11 11:46:09 utuntu kernel: [68181.176021] [UFW BLOCK] IN=enp2s0 OUT= MAC=01:00:5e:00:00:01:78:11:dc:17:16:de:08:00 SRC=0.0.0.0 DST=224.0.0.1 LEN=32 TOS=0x00 PREC=0xC0 TTL=1 ID=0 DF PROTO=2 Jun 11 11:48:14 utuntu kernel: [68306.114435] [UFW BLOCK] IN=enp2s0 OUT= MAC=01:00:5e:00:00:01:78:11:dc:3c:d0:1e:08:00 SRC=0.0.0.0 DST=224.0.0.1 LEN=32 TOS=0x00 PREC=0xC0 TTL=1 ID=0 DF PROTO=2 Jun 11 11:48:14 utuntu kernel: [68306.114666] [UFW BLOCK] IN=enp2s0 OUT= MAC=01:00:5e:00:00:01:78:11:dc:3c:d0:1e:08:00 SRC=0.0.0.0 DST=224.0.0.1 LEN=32 TOS=0x00 PREC=0xC0 TTL=1 ID=0 DF PROTO=2 Jun 11 11:48:14 utuntu kernel: [68306.617583] [UFW BLOCK] IN=enp2s0 OUT= MAC=01:00:5e:00:00:01:78:11:dc:17:16:de:08:00 SRC=0.0.0.0 DST=224.0.0.1 LEN=32 TOS=0x00 PREC=0xC0 TTL=1 ID=0 DF PROTO=2 Jun 11 11:48:14 utuntu kernel: [68306.617832] [UFW BLOCK] IN=enp2s0 OUT= MAC=01:00:5e:00:00:01:78:11:dc:17:16:de:08:00 SRC=0.0.0.0 DST=224.0.0.1 LEN=32 TOS=0x00 PREC=0xC0 TTL=1 ID=0 DF PROTO=2 Jun 11 11:50:19 utuntu kernel: [68431.555632] [UFW BLOCK] IN=enp2s0 OUT= MAC=01:00:5e:00:00:01:78:11:dc:3c:d0:1e:08:00 SRC=0.0.0.0 DST=224.0.0.1 LEN=32 TOS=0x00 PREC=0xC0 TTL=1 ID=0 DF PROTO=2 step (可跳过)失敗尝试 使用ip添加规则。 $ sudo ufw allow in from 172.16.42.2 $ sudo ufw allow out from 172.16.42.2 ip sudo ufw allow from 172.17.0.0/16 docker0 sudo ufw allow in on docker0 /etc/ufw/before.rules sudo vi /etc/ufw/before.rules 编辑/etc/ufw/before.rules如下： 在* filter部分中，在第一个必需行块之后，添加： # docker rules to enable external network access from the container # forward traffic accross the bridge -A ufw-before-forward -i docker0 -j ACCEPT -A ufw-before-forward -i testbr0 -j ACCEPT -A ufw-before-forward -m state --state RELATED,ESTABLISHED -j ACCEPT 在文件末尾，在显示COMMIT的行之后，添加以下部分： *nat :POSTROUTING ACCEPT [0:0] -A POSTROUTING -s 172.16.42.0/8 -o eth0 -j MASQUERADE # don't delete the 'COMMIT' line or these rules won't be processed COMMIT 保存文件后，使用sudo ufw disable && sudo ufw enable重新启动ufw 并没有改变仍然被阻止。 如果您熟悉iptables sudo ufw show raw 但是,我不熟悉,这个就尴尬了. /etc/default/ufw以将DEFAULT_FORWARD_POLICY的值更改为\"ACCEPT\" 这时, 参考 https://oomake.com/question/4955599 也许这是由于当前版本，但目前的答案不适用于我的系统(Docker 0.7.2与基础Ubuntu映像)。 解决方案解释为here in the official Docker documentation。 对于懒惰的人： 编辑/etc/default/ufw以将DEFAULT_FORWARD_POLICY的值更改为\"ACCEPT\"， 使用[sudo] ufw reload重新加载。 这可以确保您将流量转发到Docker的桥接网络(就我目前对这些事情的理解而言......)。 发现有用. Linux实践指南 | Linux实践指南点击关注【servicemesher】公众号回复【加群】加入学习群 | Copyright © eiuapp.github.io 2017-2019 all right reserved，powered by Gitbook Updated at 2019-09-06 05:46:26 "},"post/ssh-command-env-not-found-command.html":{"url":"post/ssh-command-env-not-found-command.html","title":"解决SSH远程执行命令找不到环境变量的问题","keywords":"","body":"解决SSH远程执行命令找不到环境变量的问题 env ssh 原理 https://blog.csdn.net/whitehack/article/details/51705889 (这个写得最好) https://www.jianshu.com/p/77ebeb27a2dc (简单) https://www.cnblogs.com/zhenyuyaodidiao/p/9287497.html 实践 在 ssh 服务端 找到 # If not running interactively, don't do anything , (在这一行下面,一般会有一句return之类的), 在这一行下面, 加入我们需要的环境变量. 但是, 也不能加多了, 加多了, scp 会失效. 如下面,就是加多了, 如果报错, 则导致 远程scp不了文件. $ vi /home/lcnx/.bashrc # If not running interactively, don't do anything export NVM_DIR=\"$HOME/.nvm\" [ -s \"$NVM_DIR/nvm.sh\" ] && \\. \"$NVM_DIR/nvm.sh\" # This loads nvm [ -s \"$NVM_DIR/bash_completion\" ] && \\. \"$NVM_DIR/bash_completion\" # This loads nvm bash_completion nvm use v11.14.0 export PATH=$PATH:/home/lcnx/.nvm/versions/node/v11.14.0/bin [ -z \"$PS1\" ] && return 应该修改成 $ vi /home/lcnx/.bashrc # If not running interactively, don't do anything export PATH=$PATH:/home/lcnx/.nvm/versions/node/v11.14.0/bin [ -z \"$PS1\" ] && return ssh 客户端 查看所使用的 ssh服务端环境 ssh lcnx@120.77.39.189 \". /home/lcnx/.bashrc; env\" ssh lcnx@120.77.39.189 \"env\" 但是下面的 %HOME 取的是 ssh 客户端 的用户,所以无效. ssh lcnx@120.77.39.189 \". $HOME/.bashrc; env\" Linux实践指南 | Linux实践指南点击关注【servicemesher】公众号回复【加群】加入学习群 | Copyright © eiuapp.github.io 2017-2019 all right reserved，powered by Gitbook Updated at 2019-09-06 05:46:26 "}}